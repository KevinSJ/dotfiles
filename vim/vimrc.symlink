source ~/.config/nvim/plugin/plugins.vim
:luafile ~/.config/nvim/lua/options.lua
:luafile ~/.config/nvim/lua/mappings.lua
:luafile ~/.config/nvim/settings.lua

" Ack (uses Ag behind the scenes)
let g:ackprg = 'ag --nogroup --nocolor --column'

" Always highlight column 80 so it's easier to see where
" cutoff appears on longer screens
autocmd BufWinEnter * highlight ColorColumn ctermbg=darkred


" GoTo code navigation.
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)
nnoremap <silent><leader>k :call <SID>show_documentation()<CR>
" Find/replace
"vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

autocmd CursorHold * silent call CocActionAsync('highlight')

command! -nargs=0 Format :call CocAction('format')
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')
command! -nargs=0 CocAction :call CocActionAsync('codeAction','')<CR>


highlight clear SignColumn


" Mapping selecting mappings
"nmap <leader><tab> <plug>(fzf-maps-n)
"xmap <leader><tab> <plug>(fzf-maps-x)
"omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
"imap <c-x><c-k> <plug>(fzf-complete-word)
"imap <c-x><c-f> <plug>(fzf-complete-path)
"imap <c-x><c-j> <plug>(fzf-complete-file-ag)
"imap <c-x><c-l> <plug>(fzf-complete-line)
map <leader>bn :r !git rev-parse --abbrev-ref HEAD<cr>A:

" Make handling vertical/linear Vim windows easier
map <leader>w- <C-W>- " decrement height
map <leader>w+ <C-W>+ " increment height
map <leader>w] <C-W>_ " maximize height
map <leader>w<SPACE> <C-W>\| " maximize width
map <leader>w[ <C-W>= " equalize all windows

" Make saving easier
" map <leader>w :update<CR>
map <leader>sv :source ~/.vimrc<CR>

"

"
"autocmd BufWinEnter terminal nmap <Esc><Esc> :bd!<cr>
autocmd TermOpen * nnoremap <buffer> <Esc><Esc> :bd!<cr>


autocmd VimEnter * if !argc() | NERDTree | endif

" Highlight words to avoid in tech writing
" http://css-tricks.com/words-avoid-educational-writing/
highlight Comment cterm=italic gui=italic
highlight TechWordsToAvoid ctermbg=red ctermfg=white
match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however\|so,\|easy/
autocmd BufWinEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertLeave * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd BufWinLeave * call clearmatches()
autocmd FilterWritePre * call SetDiffColors()

command! -nargs=0 Ns call Newscratch()
fun! Newscratch()
  execute 'tabnew '
  "map <silent> <buffer> <Leader>ff :%!jq .<CR>
  "execute 'map <silent> <buffer> <Leader>ff :set filetype=json|%!jq .<CR>'
  nnoremap <silent> <buffer> <Leader>ff :%!jq . <cr><bar>:setf json<bar> set foldmethod=expr<bar>set foldexpr=nvim_treesitter#foldexpr()<bar>:redraw!<bar>:foldopen<cr>
  nnoremap <silent> <buffer> ,ff :%!jq . <cr><bar>:setf json<bar> set foldmethod=expr<bar>set foldexpr=nvim_treesitter#foldexpr()<bar>:redraw!<bar>:foldopen<cr>
  nnoremap <silent> <buffer> ,xm :%!xmllint --format - <cr><bar>:setf html<bar>:set foldmethod=expr<bar>set foldexpr=nvim_treesitter#foldexpr()<bar>:redraw!<cr>
  nnoremap <buffer> <silent> ,s :execute(':file scratch_') .. localtime() .. (&ft != '' ? '.' .. &ft : '')<cr><bar>:set buftype= swapfile<bar>:w<cr>
  nnoremap <buffer> <silent> ,n :execute(':file ~/notes/note_') .. localtime() .. (&ft != '' ? '.' .. &ft : '')<cr><bar>:set buftype= swapfile<bar>:w<cr>
  vmap <silent> <buffer> ,dc :!base64 -d <cr>
  "execute 'vmap <silent> <buffer> <Leader>dc :!base64 -d <CR>'
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal wrap
endfun

command! -nargs=0 M call Maximize()
fun! Maximize()
  wincmd _
  wincmd |
endfun


" Create a 'scratch buffer' which is a temporary buffer Vim wont ask to save
" http://vim.wikia.com/wiki/Display_output_of_shell_commands_in_new_window
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
fun! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
    if part[0] =~ '\v[%#<]'
      let expanded_part = fnameescape(expand(part))
      let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
    endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

" Reset spelling colours when reading a new buffer
" This works around an issue where the colorscheme is changed by .local.vimrc
fun! SetSpellingColors()
  highlight SpellBad cterm=bold ctermfg=white ctermbg=red
  highlight SpellCap cterm=bold ctermfg=red ctermbg=white
endfun
autocmd BufWinEnter * call SetSpellingColors()
autocmd BufNewFile * call SetSpellingColors()
autocmd InsertEnter * call SetSpellingColors()
autocmd InsertLeave * call SetSpellingColors()
autocmd BufWritePre *.{t,j}s :call CocAction('runCommand', 'tsserver.executeAutofix')
" Change colourscheme when diffing
fun! SetDiffColors()
  highlight DiffAdd    cterm=bold ctermfg=white ctermbg=DarkGreen
  highlight DiffDelete cterm=bold ctermfg=white ctermbg=DarkGrey
  highlight DiffChange cterm=bold ctermfg=white ctermbg=DarkBlue
  highlight DiffText   cterm=bold ctermfg=white ctermbg=DarkRed
endfun

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

fun! StripTrailingWhitespace()
  " don't strip on these filetypes
  if &ft =~ 'markdown'
    return
  endif
  %s/\s\+$//e
endfun
autocmd BufWritePre * call StripTrailingWhitespace()
