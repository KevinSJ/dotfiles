source ~/.config/nvim/plugin/plugins.vim
:luafile ~/.config/nvim/lua/init.lua
let g:lexima_enable_newline_rules = 0
let g:lexima_enable_endwise_rules = 0
" Ack (uses Ag behind the scenes)
let g:ackprg = 'ag --nogroup --nocolor --column'

" Always highlight column 80 so it's easier to see where
" cutoff appears on longer screens


"vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

autocmd CursorHold * silent call CocActionAsync('highlight')

command! -nargs=0 Format :call CocAction('format')
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')
command! -nargs=0 CocAction :call CocActionAsync('codeAction','')<CR>


highlight clear SignColumn


" Mapping selecting mappings
"nmap <leader><tab> <plug>(fzf-maps-n)
"xmap <leader><tab> <plug>(fzf-maps-x)
"omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
"imap <c-x><c-k> <plug>(fzf-complete-word)
"imap <c-x><c-f> <plug>(fzf-complete-path)
"imap <c-x><c-j> <plug>(fzf-complete-file-ag)
"imap <c-x><c-l> <plug>(fzf-complete-line)
map <leader>bn :r !git rev-parse --abbrev-ref HEAD<cr>A:

" Make handling vertical/linear Vim windows easier
map <leader>w- <C-W>- " decrement height
map <leader>w+ <C-W>+ " increment height
map <leader>w] <C-W>_ " maximize height
map <leader>w<SPACE> <C-W>\| " maximize width
map <leader>w[ <C-W>= " equalize all windows

" Make saving easier
" map <leader>w :update<CR>
map <leader>sv :source ~/.vimrc<CR>

"

"
"autocmd BufWinEnter terminal nmap <Esc><Esc> :bd!<cr>
autocmd TermOpen * nnoremap <buffer> <Esc><Esc> :bd!<cr>



" Highlight words to avoid in tech writing
" http://css-tricks.com/words-avoid-educational-writing/
match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however\|so,\|easy/
autocmd BufWinEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertLeave * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/

command! -nargs=0 Ns call Newscratch()
fun! Newscratch()
  execute 'tabnew '
  "map <silent> <buffer> <Leader>ff :%!jq .<CR>
  "execute 'map <silent> <buffer> <Leader>ff :set filetype=json|%!jq .<CR>'
  nnoremap <silent> <buffer> <Leader>ff :%!jq . <cr><bar>:setf json<bar> set foldmethod=expr<bar>set foldexpr=nvim_treesitter#foldexpr()<bar>:redraw!<bar>:foldopen<cr>
  nnoremap <silent> <buffer> ,ff :%!jq . <cr><bar>:setf json<bar> set foldmethod=expr<bar>set foldexpr=nvim_treesitter#foldexpr()<bar>:redraw!<bar>:foldopen<cr>
  nnoremap <silent> <buffer> ,xm :%!xmllint --format - <cr><bar>:setf html<bar>:set foldmethod=expr<bar>set foldexpr=nvim_treesitter#foldexpr()<bar>:redraw!<cr>
  nnoremap <buffer> <silent> ,s :execute(':file scratch_') .. localtime() .. (&ft != '' ? '.' .. &ft : '')<cr><bar>:set buftype= swapfile<bar>:w<cr>
  nnoremap <buffer> <silent> ,n :execute(':file ~/notes/note_') .. localtime() .. (&ft != '' ? '.' .. &ft : '')<cr><bar>:set buftype= swapfile<bar>:w<cr>
  vmap <silent> <buffer> ,dc :!base64 -d <cr>
  "execute 'vmap <silent> <buffer> <Leader>dc :!base64 -d <CR>'
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal wrap
endfun
